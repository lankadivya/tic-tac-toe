class TicTacToe:
    def __init__(self):
        self.board = [' '] * 9
        self.current_player = 'X'

    def print_board(self):
        print(f"{self.board[0]} | {self.board[1]} | {self.board[2]}")
        print("-" * 9)
        print(f"{self.board[3]} | {self.board[4]} | {self.board[5]}")
        print("-" * 9)
        print(f"{self.board[6]} | {self.board[7]} | {self.board[8]}")

    def is_winner(self, player):
        winning_combinations = [
            (0, 1, 2), (3, 4, 5), (6, 7, 8),
            (0, 3, 6), (1, 4, 7), (2, 5, 8),
            (0, 4, 8), (2, 4, 6)
        ]
        for combo in winning_combinations:
            if all(self.board[i] == player for i in combo):
                return True
        return False

    def is_draw(self):
        return ' ' not in self.board

    def get_available_moves(self):
        return [i for i in range(9) if self.board[i] == ' ']

    def minimax(self, depth, maximizing_player):
        if self.is_winner('X'):
            return 1
        elif self.is_winner('O'):
            return -1
        elif self.is_draw():
            return 0

        if maximizing_player:
            max_eval = float('-inf')
            for move in self.get_available_moves():
                self.board[move] = 'X'
                eval = self.minimax(depth + 1, False)
                self.board[move] = ' '
                max_eval = max(max_eval, eval)
            return max_eval
        else:
            min_eval = float('inf')
            for move in self.get_available_moves():
                self.board[move] = 'O'
                eval = self.minimax(depth + 1, True)
                self.board[move] = ' '
                min_eval = min(min_eval, eval)
            return min_eval

    def get_best_move(self):
        best_eval = float('-inf')
        best_move = None
        for move in self.get_available_moves():
            self.board[move] = 'X'
            eval = self.minimax(0, False)
            self.board[move] = ' '
            if eval > best_eval:
                best_eval = eval
                best_move = move
        return best_move

    def play(self):
        while True:
            self.print_board()
            if self.is_winner('X'):
                print("You win!")
                break
            elif self.is_draw():
                print("It's a draw!")
                break

            if self.current_player == 'X':
                move = int(input("Enter your move (0-8): "))
                if self.board[move] == ' ':
                    self.board[move] = 'X'
                    self.current_player = 'O'
            else:
                ai_move = self.get_best_move()
                self.board[ai_move] = 'O'
                self.current_player = 'X'

if __name__ == "__main__":
    game = TicTacToe()
    game.play()
